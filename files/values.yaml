nodeSelector:
  karpenter.sh/controller: "true"
dnsPolicy: Default
settings:
  clusterName: ${module.eks.cluster_name}
  clusterEndpoint: ${module.eks.cluster_endpoint}
  interruptionQueue: ${module.karpenter.queue_name}
webhook:
  enabled: false

extraManifests:
  - apiVersion: karpenter.sh/v1
    kind: NodePool
    metadata:
      name: amd64
      annotations:
        kubernetes.io/description: "NodePool for amd64 workloads"
      labels:
        instance-type: graviton-amd64
    spec:
      template:
        spec:
          requirements:
            - key: kubernetes.io/arch
              operator: In
              values: ["amd64"]
            - key: kubernetes.io/os
              operator: In
              values: ["linux"]
            - key: karpenter.sh/capacity-type
              operator: In
              values: ["on-demand"]
            - key: karpenter.k8s.aws/instance-category
              operator: In
              values: ["c", "m", "r"]
            - key: node.kubernetes.io/instance-type	
              operator: In
              values: ["c7g.medium"]
            - key: karpenter.k8s.aws/instance-generation
              operator: Gt
              values: ["2"]
          nodeClassRef:
            group: karpenter.k8s.aws
            kind: EC2NodeClass
            name: default

  - apiVersion: karpenter.sh/v1
    kind: NodePool
    metadata:
      name: arm64
      annotations:
        kubernetes.io/description: "NodePool for arm64 workloads"
      labels:
        instance-type: spot-arm64
    spec:
      template:
        spec:
          requirements:
            - key: kubernetes.io/arch
              operator: In
              values: ["arm64"]
            - key: kubernetes.io/os
              operator: In
              values: ["linux"]
            - key: karpenter.sh/capacity-type
              operator: In
              values: ["spot"]
            - key: karpenter.k8s.aws/instance-category
              operator: In
              values: ["c", "a"]
            - key: node.kubernetes.io/instance-type	
              operator: In
              values: ["t3.medium"]
            - key: karpenter.k8s.aws/instance-generation
              operator: Gt
              values: ["2"]
          nodeClassRef:
            group: karpenter.k8s.aws
            kind: EC2NodeClass
            name: default

  - apiVersion: karpenter.k8s.aws/v1
    kind: EC2NodeClass
    metadata:
      name: default
      annotations:
        kubernetes.io/description: "General purpose EC2NodeClass for running Amazon Linux 2 nodes"
    spec:
      role: "KarpenterNodeRole-${module.eks.cluster_name}"
      subnetSelectorTerms:
        - tags:
            karpenter.sh/discovery: "${module.eks.cluster_name}"
      securityGroupSelectorTerms:
        - tags:
            karpenter.sh/discovery: "${module.eks.cluster_name}"
      amiSelectorTerms:
        - alias: al2023@latest
